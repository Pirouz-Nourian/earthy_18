"""Voxelize a mesh and gernate bricks based on these voxels
    Inputs:
        allBricks (list of boxes): All the bricks generated by the previous script
        onlyLayer (bool): Boolean when true only one layer will be showed, otherwise all bricks will be showed
        layerNum (int): Number of the layer to show
    Output:
        out_bricks (list of boxes): The bricks to be shown, either all of them or only the selected layer
        out_count_layers (int): The total amount of layers in the structure
        out_prev_layer (list of rectangles): The contours of the layer below the selected layer, it is empty if all bricks need to be shown"""

__author__ = "Jeroen de Bruijn (edited by Erron Estrado)"
__version__ = "2018.10.27"

# Import library
import Rhino.Geometry as rg
import Grasshopper as gh
import clr
clr.AddReference("Grasshopper")

def ghDataTreeToPythonList(dataTree):
    
    """ Converts a GH datatree to a nested Python list """
    
    # Create an empty Python list
    pyList = []
    
    # Add the branches of the Gh datatree to this list
    for i in range(dataTree.BranchCount):
        branch = list(dataTree.Branch(i))
        pyList.append(branch)
        
    return pyList

brickList = ghDataTreeToPythonList(allBricks)

# Variable for amount of layers
layer_count = len(brickList)-1

# Check if only the selected layer needs to be showed
if onlyLayer:
    # Check if layer input is not to big
    if layerNum > layer_count:
        layerNum = layer_count
    # Only output the selected layer
    out_bricks = brickList[layerNum]
    
    # Check if the layer number is 1 or bigger
    if layerNum >= 1:
        # Get the bricks on the layer below
        brks_below = brickList[layerNum-1]
        # Empty list to hold the countours of the bricks below
        rectangles_below = []
        # Loop trough each brick on the level below
        for brk in brks_below:
            # Get the corner points
            corners = brk.GetCorners()
            # Draw rectangle
            rectangles_below.append( rg.Rectangle3d( rg.Plane(corners[5], corners[6], corners[7]) ,corners[5], corners[7]) )
        
        # Output all countours of the bricks on the layer below
        out_prev_layer = rectangles_below
else:
    # Import library to create grasshopper tree
    import ghpythonlib.treehelpers as th
    # Output all the bricks
    out_bricks = th.list_to_tree(brickList)

# Output total amount of layers
out_count_layers = layer_count